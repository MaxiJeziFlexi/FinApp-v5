ROLE: Propose diffs only (no auto-edits).
GOAL: Add RBAC + subscription tiers to FinAdvisor (Express + Drizzle/Neon backend; React + react-query + shadcn + wouter). Tiers: FREE, PRO, MAX_PRO, ADMIN. Dashboard is accessible to all.
SECURITY CONSTRAINTS: Enforce access server-side (deny-by-default). Don’t touch .replit, deploy, or secrets. Bind 0.0.0.0:$PORT. Use process.env.DATABASE_URL.

BACKEND (exact work):

RBAC model: Add roles enum (FREE|PRO|MAX_PRO|ADMIN) in users, and a permission map. Implement middleware requirePerm("perm") and apply to routes.

Feature flags endpoint: GET /api/me/features returns enabled features from role + flags; UI is conditional, but server remains source of truth.

Tier gating (routes & limits):

/api/user/profile, /api/financial/viz3d, dashboard data → ALL (FREE/PRO/MAX_PRO/ADMIN).

/api/transactions/import → FREE: 500 tx/mo; PRO: 10k/mo; MAX_PRO: unlimited (+ bank/API integrations).

/api/advice (rule-based) → FREE: basic rules; PRO: advanced rules; MAX_PRO: personalized w/ user model.

/api/chat → FREE: 10 msgs/day, no web search; PRO: 100/day + web search; MAX_PRO: 500/day + model selection + report export.

/api/analytics/advanced (cohorts/3D) → PRO, MAX_PRO; FREE gets basic charts only.

/api/export → FREE: CSV (current month); PRO: CSV/XLSX (12m); MAX_PRO: CSV/XLSX/JSON + webhooks.

Admin surfaces (/api/admin/*, flags/billing/users/logs) → ADMIN only.

Add counters/quotas table for per-user limits (month window UTC). Return 429 when exceeded.

Migrations for: users.role, feature_flags, usage_counters.

FRONTEND (minimal diffs):

Remove mocks; fetch userProfile, viz3d, and /api/me/features.

Gated UI via features, but never rely on UI only—backend enforces.

Onboarding completion sets local unlock, then refetch features.

DELIVERABLES:

Short plan + unified diffs only (backend routes/middleware, schema/migrations, minimal UI hooks).

curl smoke tests for each gated route (FREE/PRO/MAX_PRO/ADMIN cases).

Rollback steps.

Ask before changing any deploy/secrets.

(Why: access must be enforced server-side with deny-by-default RBAC; use feature flags to gate/roll out tiered features; keep pricing/tier logic observable and adjustable.)