import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import {
  User,
  Settings,
  Shield,
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Sparkles,
  Target,
  Brain,
  Lock,
  Eye,
  AlertCircle,
  Zap
} from "lucide-react";

interface OnboardingWizardProps {
  userId: string;
  onComplete: () => void;
}

interface OnboardingData {
  step1: {
    firstName: string;
    lastName: string;
    dateOfBirth: string;
    occupation: string;
    experience: string;
  };
  step2: {
    communicationStyle: string;
    learningPreference: string;
    riskTolerance: string;
    primaryGoals: string[];
    preferredAdvisors: string[];
  };
  step3: {
    dataCollection: boolean;
    analytics: boolean;
    personalization: boolean;
    marketing: boolean;
    thirdParty: boolean;
  };
  currentStep: number;
  completed: boolean;
}

const step1Schema = z.object({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  dateOfBirth: z.string().min(1, "Date of birth is required"),
  occupation: z.string().min(1, "Occupation is required"),
  experience: z.enum(["beginner", "intermediate", "advanced", "expert"], {
    required_error: "Please select your experience level"
  })
});

const step2Schema = z.object({
  communicationStyle: z.enum(["casual", "professional", "technical", "simple"], {
    required_error: "Please select a communication style"
  }),
  learningPreference: z.enum(["visual", "auditory", "hands-on", "reading"], {
    required_error: "Please select your learning preference"
  }),
  riskTolerance: z.enum(["conservative", "moderate", "aggressive"], {
    required_error: "Please select your risk tolerance"
  }),
  primaryGoals: z.array(z.string()).min(1, "Select at least one goal"),
  preferredAdvisors: z.array(z.string()).min(1, "Select at least one advisor type")
});

const step3Schema = z.object({
  dataCollection: z.boolean(),
  analytics: z.boolean(),
  personalization: z.boolean(),
  marketing: z.boolean(),
  thirdParty: z.boolean()
});

export default function OnboardingWizard({ userId, onComplete }: OnboardingWizardProps) {
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [onboardingData, setOnboardingData] = useState<OnboardingData>({
    step1: {
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      occupation: "",
      experience: "beginner"
    },
    step2: {
      communicationStyle: "casual",
      learningPreference: "visual",
      riskTolerance: "moderate",
      primaryGoals: [],
      preferredAdvisors: []
    },
    step3: {
      dataCollection: true,
      analytics: true,
      personalization: true,
      marketing: false,
      thirdParty: false
    },
    currentStep: 1,
    completed: false
  });

  // Form hook must be at the top level (not inside conditional render functions)
  const step1Form = useForm<z.infer<typeof step1Schema>>({
    resolver: zodResolver(step1Schema),
    defaultValues: onboardingData.step1
  });

  // Load saved progress
  const { data: savedProgress } = useQuery({
    queryKey: ['/api/onboarding/progress', userId],
    enabled: !!userId,
    staleTime: 0
  });

  // Save progress mutation
  const saveProgressMutation = useMutation({
    mutationFn: async (data: Partial<OnboardingData>) => {
      return await apiRequest('POST', '/api/onboarding/save-progress', {
        userId,
        ...data
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ 
        queryKey: ['/api/onboarding/progress', userId] 
      });
    },
    onError: (error) => {
      console.error('Failed to save progress:', error);
      toast({
        title: "Save Failed",
        description: "Progress couldn't be saved. Please try again.",
        variant: "destructive",
      });
    }
  });

  // Complete onboarding mutation
  const completeOnboardingMutation = useMutation({
    mutationFn: async (data: OnboardingData) => {
      return await apiRequest('POST', '/api/onboarding/complete', {
        userId,
        ...data
      });
    },
    onSuccess: () => {
      toast({
        title: "Onboarding Complete! 🎉",
        description: "Welcome to FinApp! Let's start your financial journey.",
      });
      onComplete();
    },
    onError: (error) => {
      console.error('Failed to complete onboarding:', error);
      toast({
        title: "Completion Failed",
        description: "Please try again or contact support.",
        variant: "destructive",
      });
    }
  });

  // Load saved progress on mount
  useEffect(() => {
    if (savedProgress && !savedProgress.completed) {
      // Safely merge saved progress with default structure
      const updatedData = {
        ...onboardingData,
        step1: {
          ...onboardingData.step1,
          ...savedProgress.step1
        },
        step2: {
          ...onboardingData.step2,
          ...savedProgress.step2,
          // Ensure arrays are properly initialized
          primaryGoals: savedProgress.step2?.primaryGoals || onboardingData.step2.primaryGoals,
          preferredAdvisors: savedProgress.step2?.preferredAdvisors || onboardingData.step2.preferredAdvisors
        },
        step3: {
          ...onboardingData.step3,
          ...savedProgress.step3
        },
        currentStep: savedProgress.currentStep || 1,
        completed: savedProgress.completed || false
      };

      setOnboardingData(updatedData);
      setCurrentStep(savedProgress.currentStep || 1);

      // Update form with loaded step1 data
      if (savedProgress.step1) {
        step1Form.reset(updatedData.step1);
      }
    }
  }, [savedProgress, step1Form]);

  // Sync form with onboarding data changes
  useEffect(() => {
    step1Form.reset(onboardingData.step1);
  }, [onboardingData.step1, step1Form]);

  // Auto-save on data changes
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (currentStep > 1 || (onboardingData.step1 && Object.values(onboardingData.step1).some(v => v))) {
        saveProgressMutation.mutate({
          ...onboardingData,
          currentStep
        });
      }
    }, 1000);

    return () => clearTimeout(timeoutId);
  }, [onboardingData, currentStep]);

  const updateStepData = (step: keyof OnboardingData, data: any) => {
    setOnboardingData(prev => ({
      ...prev,
      [step]: { ...prev[step], ...data }
    }));
  };

  const nextStep = () => {
    if (currentStep < 4) {
      const newStep = currentStep + 1;
      setCurrentStep(newStep);
      saveProgressMutation.mutate({
        ...onboardingData,
        currentStep: newStep
      });
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleComplete = () => {
    const finalData = {
      ...onboardingData,
      completed: true,
      currentStep: 4
    };
    completeOnboardingMutation.mutate(finalData);
  };

  const stepTitles = [
    "Account Basics",
    "Preferences",
    "Data Permissions",
    "Summary & Confirm"
  ];

  const stepDescriptions = [
    "Tell us about yourself to personalize your experience",
    "Customize how FinApp works for you",
    "Control your data and privacy settings",
    "Review and confirm your settings"
  ];

  const getProgressPercentage = () => {
    return Math.round((currentStep / 4) * 100);
  };

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center space-x-4 mb-8">
      {[1, 2, 3, 4].map((step) => (
        <div key={step} className="flex items-center">
          <div className={`
            w-10 h-10 rounded-full flex items-center justify-center border-2 transition-all duration-300
            ${step < currentStep 
              ? 'bg-green-500 border-green-500 text-white' 
              : step === currentStep 
                ? 'bg-primary border-primary text-white' 
                : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-400'
            }
          `}>
            {step < currentStep ? (
              <CheckCircle className="w-5 h-5" />
            ) : (
              step
            )}
          </div>
          {step < 4 && (
            <div className={`
              w-16 h-1 mx-2 rounded-full transition-all duration-300
              ${step < currentStep ? 'bg-green-500' : 'bg-gray-200 dark:bg-gray-700'}
            `} />
          )}
        </div>
      ))}
    </div>
  );

  const renderStep1 = () => {
    const onSubmit = (data: z.infer<typeof step1Schema>) => {
      updateStepData('step1', data);
      nextStep();
    };

    return (
      <form onSubmit={step1Form.handleSubmit(onSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="firstName">First Name</Label>
            <Input
              id="firstName"
              {...step1Form.register('firstName')}
              onChange={(e) => {
                step1Form.setValue('firstName', e.target.value);
                updateStepData('step1', { firstName: e.target.value });
              }}
              className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
            />
            {step1Form.formState.errors.firstName && (
              <p className="text-sm text-red-500">{step1Form.formState.errors.firstName.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="lastName">Last Name</Label>
            <Input
              id="lastName"
              {...step1Form.register('lastName')}
              onChange={(e) => {
                step1Form.setValue('lastName', e.target.value);
                updateStepData('step1', { lastName: e.target.value });
              }}
              className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
            />
            {step1Form.formState.errors.lastName && (
              <p className="text-sm text-red-500">{step1Form.formState.errors.lastName.message}</p>
            )}
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="dateOfBirth">Date of Birth</Label>
          <Input
            id="dateOfBirth"
            type="date"
            {...step1Form.register('dateOfBirth')}
            onChange={(e) => {
              step1Form.setValue('dateOfBirth', e.target.value);
              updateStepData('step1', { dateOfBirth: e.target.value });
            }}
            className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
          />
          {step1Form.formState.errors.dateOfBirth && (
            <p className="text-sm text-red-500">{step1Form.formState.errors.dateOfBirth.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="occupation">Occupation</Label>
          <Input
            id="occupation"
            {...step1Form.register('occupation')}
            onChange={(e) => {
              step1Form.setValue('occupation', e.target.value);
              updateStepData('step1', { occupation: e.target.value });
            }}
            placeholder="e.g., Software Engineer, Teacher, Student"
            className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
          />
          {step1Form.formState.errors.occupation && (
            <p className="text-sm text-red-500">{step1Form.formState.errors.occupation.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="experience">Financial Knowledge Level</Label>
          <Select
            value={step1Form.watch('experience')}
            onValueChange={(value) => {
              step1Form.setValue('experience', value as any);
              updateStepData('step1', { experience: value });
            }}
          >
            <SelectTrigger className="transition-all duration-200 focus:ring-2 focus:ring-primary/20">
              <SelectValue placeholder="Select your experience level" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="beginner">
                <div className="flex items-center space-x-2">
                  <span>🌱</span>
                  <span>Beginner - Just starting out</span>
                </div>
              </SelectItem>
              <SelectItem value="intermediate">
                <div className="flex items-center space-x-2">
                  <span>📚</span>
                  <span>Intermediate - Some knowledge</span>
                </div>
              </SelectItem>
              <SelectItem value="advanced">
                <div className="flex items-center space-x-2">
                  <span>🎯</span>
                  <span>Advanced - Strong understanding</span>
                </div>
              </SelectItem>
              <SelectItem value="expert">
                <div className="flex items-center space-x-2">
                  <span>🚀</span>
                  <span>Expert - Very experienced</span>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {step1Form.formState.errors.experience && (
            <p className="text-sm text-red-500">{step1Form.formState.errors.experience.message}</p>
          )}
        </div>

        <div className="flex justify-end pt-6">
          <Button type="submit" className="group">
            Continue
            <ArrowRight className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
          </Button>
        </div>
      </form>
    );
  };

  const renderStep2 = () => {
    const goals = [
      { id: 'emergency_fund', label: 'Build Emergency Fund', icon: '🛡️' },
      { id: 'debt_payoff', label: 'Pay Off Debt', icon: '���' },
      { id: 'save_home', label: 'Save for Home', icon: '🏠' },
      { id: 'retirement', label: 'Retirement Planning', icon: '🏖️' },
      { id: 'investment', label: 'Investment Growth', icon: '📈' },
      { id: 'education', label: 'Learn Finance', icon: '🎓' }
    ];

    const advisors = [
      { id: 'budget_planner', label: 'Budget Planner', icon: '📊' },
      { id: 'debt_expert', label: 'Debt Expert', icon: '💰' },
      { id: 'savings_strategist', label: 'Savings Strategist', icon: '🎯' },
      { id: 'retirement_advisor', label: 'Retirement Advisor', icon: '🏦' },
      { id: 'investment_guide', label: 'Investment Guide', icon: '📊' }
    ];

    const handleGoalToggle = (goalId: string) => {
      const currentGoals = onboardingData.step2?.primaryGoals || [];
      const newGoals = currentGoals.includes(goalId)
        ? currentGoals.filter(g => g !== goalId)
        : [...currentGoals, goalId];

      updateStepData('step2', { primaryGoals: newGoals });
    };

    const handleAdvisorToggle = (advisorId: string) => {
      const currentAdvisors = onboardingData.step2?.preferredAdvisors || [];
      const newAdvisors = currentAdvisors.includes(advisorId)
        ? currentAdvisors.filter(a => a !== advisorId)
        : [...currentAdvisors, advisorId];

      updateStepData('step2', { preferredAdvisors: newAdvisors });
    };

    const canProceed = (onboardingData.step2?.primaryGoals?.length || 0) > 0 &&
                     (onboardingData.step2?.preferredAdvisors?.length || 0) > 0;

    return (
      <div className="space-y-8">
        <div className="space-y-4">
          <Label className="text-base font-semibold">Communication Style</Label>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {[
              { value: 'casual', label: 'Casual & Friendly', icon: '😊' },
              { value: 'professional', label: 'Professional', icon: '💼' },
              { value: 'technical', label: 'Technical & Detailed', icon: '🔬' },
              { value: 'simple', label: 'Simple & Clear', icon: '✨' }
            ].map((style) => (
              <div
                key={style.value}
                onClick={() => updateStepData('step2', { communicationStyle: style.value })}
                className={`
                  p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md
                  ${onboardingData.step2?.communicationStyle === style.value
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-primary/50'
                  }
                `}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{style.icon}</div>
                  <div className="text-sm font-medium">{style.label}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          <Label className="text-base font-semibold">Learning Preference</Label>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {[
              { value: 'visual', label: 'Visual Learner', icon: '👁️' },
              { value: 'auditory', label: 'Audio Learner', icon: '🎧' },
              { value: 'hands-on', label: 'Hands-On', icon: '👋' },
              { value: 'reading', label: 'Reading & Text', icon: '📖' }
            ].map((preference) => (
              <div
                key={preference.value}
                onClick={() => updateStepData('step2', { learningPreference: preference.value })}
                className={`
                  p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md
                  ${onboardingData.step2?.learningPreference === preference.value
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-primary/50'
                  }
                `}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{preference.icon}</div>
                  <div className="text-sm font-medium">{preference.label}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          <Label className="text-base font-semibold">Risk Tolerance</Label>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            {[
              { value: 'conservative', label: 'Conservative', desc: 'Prefer safety over returns', icon: '🛡️' },
              { value: 'moderate', label: 'Moderate', desc: 'Balanced approach', icon: '⚖️' },
              { value: 'aggressive', label: 'Aggressive', desc: 'Higher risk for higher returns', icon: '🚀' }
            ].map((tolerance) => (
              <div
                key={tolerance.value}
                onClick={() => updateStepData('step2', { riskTolerance: tolerance.value })}
                className={`
                  p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md
                  ${onboardingData.step2?.riskTolerance === tolerance.value
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-primary/50'
                  }
                `}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{tolerance.icon}</div>
                  <div className="text-sm font-medium">{tolerance.label}</div>
                  <div className="text-xs text-gray-500 mt-1">{tolerance.desc}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          <Label className="text-base font-semibold">Primary Goals (Select at least 1)</Label>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {goals.map((goal) => (
              <div
                key={goal.id}
                onClick={() => handleGoalToggle(goal.id)}
                className={`
                  p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md
                  ${onboardingData.step2?.primaryGoals?.includes(goal.id)
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-primary/50'
                  }
                `}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{goal.icon}</div>
                  <div className="text-sm font-medium">{goal.label}</div>
                  {onboardingData.step2?.primaryGoals?.includes(goal.id) && (
                    <CheckCircle className="w-4 h-4 text-primary mx-auto mt-2" />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          <Label className="text-base font-semibold">Preferred AI Advisors (Select at least 1)</Label>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {advisors.map((advisor) => (
              <div
                key={advisor.id}
                onClick={() => handleAdvisorToggle(advisor.id)}
                className={`
                  p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 hover:shadow-md
                  ${onboardingData.step2?.preferredAdvisors?.includes(advisor.id)
                    ? 'border-primary bg-primary/5'
                    : 'border-gray-200 dark:border-gray-700 hover:border-primary/50'
                  }
                `}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{advisor.icon}</div>
                  <div className="text-sm font-medium">{advisor.label}</div>
                  {onboardingData.step2?.preferredAdvisors?.includes(advisor.id) && (
                    <CheckCircle className="w-4 h-4 text-primary mx-auto mt-2" />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="flex justify-between pt-6">
          <Button variant="outline" onClick={prevStep} className="group">
            <ArrowLeft className="w-4 h-4 mr-2 transition-transform group-hover:-translate-x-1" />
            Back
          </Button>
          <Button onClick={nextStep} disabled={!canProceed} className="group">
            Continue
            <ArrowRight className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
          </Button>
        </div>
      </div>
    );
  };

  const renderStep3 = () => {
    const permissions = [
      {
        key: 'dataCollection',
        title: 'Data Collection & Analysis',
        description: 'Allow FinApp to collect and analyze your financial behavior to provide personalized insights',
        icon: Brain,
        required: true
      },
      {
        key: 'analytics',
        title: 'Analytics & Performance Tracking',
        description: 'Track your learning progress and financial goals to improve recommendations',
        icon: Target,
        required: true
      },
      {
        key: 'personalization',
        title: 'AI Personalization',
        description: 'Use your data to personalize AI responses and create custom financial plans',
        icon: Sparkles,
        required: true
      },
      {
        key: 'marketing',
        title: 'Marketing Communications',
        description: 'Send you updates about new features, financial tips, and educational content',
        icon: Zap,
        required: false
      },
      {
        key: 'thirdParty',
        title: 'Third-Party Integrations',
        description: 'Share anonymized data with trusted partners to improve financial services',
        icon: Lock,
        required: false
      }
    ];

    const handlePermissionChange = (key: string, value: boolean) => {
      updateStepData('step3', { [key]: value });
    };

    const requiredPermissionsGranted = permissions
      .filter(p => p.required)
      .every(p => onboardingData.step3[p.key as keyof typeof onboardingData.step3]);

    return (
      <div className="space-y-6">
        <Alert>
          <Shield className="h-4 w-4" />
          <AlertDescription>
            Your privacy is important to us. You have full control over your data permissions and can change these settings anytime.
          </AlertDescription>
        </Alert>

        <div className="space-y-4">
          {permissions.map((permission) => {
            const IconComponent = permission.icon;
            const isGranted = onboardingData.step3[permission.key as keyof typeof onboardingData.step3];

            return (
              <Card key={permission.key} className={`
                transition-all duration-200 
                ${permission.required ? 'border-primary/50' : 'border-gray-200 dark:border-gray-700'}
              `}>
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4">
                    <div className={`
                      w-12 h-12 rounded-full flex items-center justify-center
                      ${isGranted ? 'bg-primary/10' : 'bg-gray-100 dark:bg-gray-800'}
                    `}>
                      <IconComponent className={`w-6 h-6 ${isGranted ? 'text-primary' : 'text-gray-400'}`} />
                    </div>
                    
                    <div className="flex-1 space-y-2">
                      <div className="flex items-center justify-between">
                        <h3 className="font-semibold flex items-center space-x-2">
                          <span>{permission.title}</span>
                          {permission.required && (
                            <Badge variant="secondary" className="text-xs">Required</Badge>
                          )}
                        </h3>
                        <Checkbox
                          checked={isGranted}
                          onCheckedChange={(checked) => handlePermissionChange(permission.key, !!checked)}
                          disabled={permission.required}
                          className="h-5 w-5"
                        />
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {permission.description}
                      </p>
                      {permission.required && !isGranted && (
                        <div className="flex items-center space-x-2 text-red-500 text-sm">
                          <AlertCircle className="w-4 h-4" />
                          <span>This permission is required to use FinApp</span>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
          <div className="flex items-start space-x-3">
            <Eye className="w-5 h-5 text-blue-500 mt-0.5" />
            <div className="space-y-2">
              <h4 className="font-medium">Data Transparency</h4>
              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                <li>• All data is encrypted and stored securely</li>
                <li>• You can export or delete your data anytime</li>
                <li>• We never sell your personal information</li>
                <li>• Anonymous usage statistics help improve the app</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="flex justify-between pt-6">
          <Button variant="outline" onClick={prevStep} className="group">
            <ArrowLeft className="w-4 h-4 mr-2 transition-transform group-hover:-translate-x-1" />
            Back
          </Button>
          <Button 
            onClick={nextStep} 
            disabled={!requiredPermissionsGranted}
            className="group"
          >
            Review & Confirm
            <ArrowRight className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
          </Button>
        </div>
      </div>
    );
  };

  const renderStep4 = () => {
    const { step1, step2 = {}, step3 } = onboardingData;

    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4">
            <CheckCircle className="w-10 h-10 text-white" />
          </div>
          <h2 className="text-2xl font-bold mb-2">Almost Ready!</h2>
          <p className="text-gray-600 dark:text-gray-400">
            Review your settings and complete your FinApp setup
          </p>
        </div>

        <div className="grid gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <User className="w-5 h-5" />
                <span>Personal Information</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400">Name</div>
                  <div>{step1.firstName} {step1.lastName}</div>
                </div>
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400">Occupation</div>
                  <div>{step1.occupation}</div>
                </div>
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400">Experience Level</div>
                  <div className="capitalize">{step1.experience}</div>
                </div>
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400">Date of Birth</div>
                  <div>{step1.dateOfBirth}</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Settings className="w-5 h-5" />
                <span>Preferences</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4 text-sm">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="font-medium text-gray-500 dark:text-gray-400">Communication Style</div>
                    <div className="capitalize">{step2?.communicationStyle || 'Not selected'}</div>
                  </div>
                  <div>
                    <div className="font-medium text-gray-500 dark:text-gray-400">Learning Preference</div>
                    <div className="capitalize">{step2?.learningPreference || 'Not selected'}</div>
                  </div>
                </div>
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400 mb-2">Primary Goals</div>
                  <div className="flex flex-wrap gap-2">
                    {(step2?.primaryGoals || []).map(goal => (
                      <Badge key={goal} variant="secondary">{goal.replace('_', ' ')}</Badge>
                    ))}
                    {(!step2?.primaryGoals || step2.primaryGoals.length === 0) && (
                      <span className="text-gray-500 text-sm">No goals selected</span>
                    )}
                  </div>
                </div>
                <div>
                  <div className="font-medium text-gray-500 dark:text-gray-400 mb-2">Preferred Advisors</div>
                  <div className="flex flex-wrap gap-2">
                    {(step2?.preferredAdvisors || []).map(advisor => (
                      <Badge key={advisor} variant="outline">{advisor.replace('_', ' ')}</Badge>
                    ))}
                    {(!step2?.preferredAdvisors || step2.preferredAdvisors.length === 0) && (
                      <span className="text-gray-500 text-sm">No advisors selected</span>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Shield className="w-5 h-5" />
                <span>Privacy & Permissions</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                {Object.entries(step3).map(([key, value]) => (
                  <div key={key} className="flex items-center justify-between">
                    <span className="capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}</span>
                    <Badge variant={value ? "default" : "secondary"}>
                      {value ? "Enabled" : "Disabled"}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        <Alert>
          <Sparkles className="h-4 w-4" />
          <AlertDescription>
            Welcome to FinApp! Your personalized financial education journey is about to begin. 
            You can update any of these settings later in your profile.
          </AlertDescription>
        </Alert>

        <div className="flex justify-between pt-6">
          <Button variant="outline" onClick={prevStep} className="group">
            <ArrowLeft className="w-4 h-4 mr-2 transition-transform group-hover:-translate-x-1" />
            Back
          </Button>
          <Button 
            onClick={handleComplete}
            disabled={completeOnboardingMutation.isPending}
            className="bg-gradient-to-r from-primary to-secondary hover:shadow-lg group"
          >
            {completeOnboardingMutation.isPending ? (
              "Completing..."
            ) : (
              <>
                Complete Setup
                <CheckCircle className="w-4 h-4 ml-2 transition-transform group-hover:scale-110" />
              </>
            )}
          </Button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent mb-4">
              Welcome to FinApp
            </h1>
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-6">
              Let's set up your personalized financial education experience
            </p>
            <Progress value={getProgressPercentage()} className="w-full h-2 mb-2" />
            <p className="text-sm text-gray-500">
              Step {currentStep} of 4: {stepTitles[currentStep - 1]}
            </p>
          </div>

          {/* Step Indicator */}
          {renderStepIndicator()}

          {/* Main Content */}
          <Card className="shadow-xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-2xl">{stepTitles[currentStep - 1]}</CardTitle>
              <CardDescription className="text-base">
                {stepDescriptions[currentStep - 1]}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {currentStep === 1 && renderStep1()}
              {currentStep === 2 && renderStep2()}
              {currentStep === 3 && renderStep3()}
              {currentStep === 4 && renderStep4()}
            </CardContent>
          </Card>

          {/* Auto-save indicator */}
          {saveProgressMutation.isPending && (
            <div className="fixed bottom-4 right-4 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-3 flex items-center space-x-2">
              <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
              <span className="text-sm text-gray-600 dark:text-gray-400">Saving progress...</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
