import { useState, useEffect, useCallback } from 'react';
import { Link, useLocation } from 'wouter';
import { Button } from '@/components/ui/button';
import {
  Home,
  MessageCircle,
  User,
  LogOut,
  ChevronLeft,
  ChevronRight,
  Settings,
  Moon,
  Sun,
  Palette,
  Brain,
  Plus,
  MoreHorizontal,
  Loader2
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/hooks/useAuth';
import { useTheme } from '@/contexts/ThemeContext';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface ChatSession {
  id: string;
  sessionId: string;
  advisorId: string;
  advisorName: string;
  title: string;
  lastMessage: string;
  timestamp: string;
  messageCount: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export default function UserSideNav() {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [location] = useLocation();
  const { user, logout } = useAuth();
  const { theme, setTheme } = useTheme();

  // Real chat sessions from database
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [isLoadingSessions, setIsLoadingSessions] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<string | null>(null);

  // Load collapsed state from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('finapp:sidenav:collapsed');
    if (saved) {
      setIsCollapsed(saved === 'true');
    }
  }, []);

  // Fetch chat sessions from API
  const fetchChatSessions = useCallback(async () => {
    if (!user?.id) return;

    setIsLoadingSessions(true);
    try {
      const response = await fetch(`/api/chat/sessions/${user.id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        // Add credentials to avoid browser extension interference
        credentials: 'same-origin'
      });

      if (response.ok) {
        const sessions = await response.json();
        setChatSessions(sessions);
        setLastUpdate(new Date().toISOString());
      } else {
        console.warn('Failed to fetch chat sessions, chat history will be unavailable');
        setChatSessions([]); // Set empty array as fallback
      }
    } catch (error) {
      // Silently handle errors to avoid console spam from browser extensions
      console.warn('Chat sessions unavailable (this is normal if browser extensions are interfering):', error.message);
      setChatSessions([]); // Set empty array as fallback
    } finally {
      setIsLoadingSessions(false);
    }
  }, [user?.id]);

  // Check for updates (polling for real-time updates)
  const checkForUpdates = useCallback(async () => {
    if (!user?.id || !lastUpdate) return;

    try {
      const response = await fetch(`/api/chat/updates/${user.id}?since=${lastUpdate}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'same-origin'
      });

      if (response.ok) {
        const data = await response.json();
        if (data.updates > 0) {
          // Refresh sessions if there are updates
          fetchChatSessions();
        }
      }
    } catch (error) {
      // Silently fail polling to avoid console spam
      console.debug('Chat updates polling skipped:', error.message);
    }
  }, [user?.id, lastUpdate, fetchChatSessions]);

  // Initial load of chat sessions
  useEffect(() => {
    if (user?.id) {
      fetchChatSessions();
    }
  }, [user?.id, fetchChatSessions]);

  // Set up real-time polling for updates (reduced frequency to avoid browser extension conflicts)
  useEffect(() => {
    if (!user?.id || !lastUpdate) return;

    const interval = setInterval(checkForUpdates, 30000); // Check every 30 seconds (reduced from 10s)
    return () => clearInterval(interval);
  }, [user?.id, lastUpdate, checkForUpdates]);

  // Listen for chat updates from other components
  useEffect(() => {
    const handleChatUpdate = () => {
      fetchChatSessions();
    };

    window.addEventListener('chatUpdated', handleChatUpdate);
    return () => window.removeEventListener('chatUpdated', handleChatUpdate);
  }, [fetchChatSessions]);

  // Save collapsed state to localStorage
  const toggleCollapsed = () => {
    const newState = !isCollapsed;
    setIsCollapsed(newState);
    localStorage.setItem('finapp:sidenav:collapsed', newState.toString());
  };

  const isActive = (path: string) => {
    return location === path || (path !== '/' && location.startsWith(path));
  };

  const handleChatClick = (session: ChatSession) => {
    // Navigate to FinApp with specific chat session
    window.location.href = `/finapp?sessionId=${session.sessionId}&advisorId=${session.advisorId}`;
  };

  const handleNewChat = async () => {
    if (!user?.id) return;

    try {
      // First, get available advisors
      const advisorsResponse = await fetch('/api/advisors');
      if (!advisorsResponse.ok) {
        throw new Error('Failed to fetch advisors');
      }

      const advisors = await advisorsResponse.json();
      if (!advisors || advisors.length === 0) {
        throw new Error('No advisors available');
      }

      // Use the first available advisor (or default to financial_planner)
      const defaultAdvisor = advisors.find((a: any) => a.id === 'financial_planner') || advisors[0];

      // Create a new chat session
      const response = await fetch('/api/chat/sessions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          advisorId: defaultAdvisor.id,
          title: 'Nowy Chat Finansowy'
        })
      });

      if (response.ok) {
        const newSession = await response.json();
        // Navigate to the new chat
        window.location.href = `/finapp?sessionId=${newSession.sessionId}&advisorId=${newSession.advisorId}&new=true`;
      } else {
        const errorData = await response.json();
        console.error('Failed to create new chat session:', errorData);
        // Fallback: navigate to general chat
        window.location.href = '/finapp?new=true';
      }
    } catch (error) {
      console.error('Error creating new chat:', error);
      // Fallback: navigate to general chat
      window.location.href = '/finapp?new=true';
    }
  };

  const handleDeleteChat = async (sessionId: string, event: React.MouseEvent) => {
    event.stopPropagation(); // Prevent chat click

    if (!user?.id) return;

    try {
      const response = await fetch(`/api/chat/sessions/${sessionId}?userId=${user.id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        // Remove from local state immediately for better UX
        setChatSessions(prev => prev.filter(session => session.sessionId !== sessionId));
      }
    } catch (error) {
      console.error('Error deleting chat:', error);
    }
  };

  return (
    <motion.div
      initial={{ x: -300 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.3 }}
      className={`fixed left-0 top-0 h-full bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm border-r border-gray-200 dark:border-gray-700 z-40 flex flex-col shadow-xl transition-all duration-300 ${
        isCollapsed ? 'w-16' : 'w-64'
      }`}
    >
      {/* Header */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between">
          <AnimatePresence mode="wait">
            {!isCollapsed ? (
              <motion.div
                key="expanded"
                initial={{ opacity: 0, width: 0 }}
                animate={{ opacity: 1, width: 'auto' }}
                exit={{ opacity: 0, width: 0 }}
                className="flex items-center gap-3"
              >
                <Link href="/finapp">
                  <div className="flex items-center gap-3 cursor-pointer hover:opacity-80 transition-opacity">
                    <div className="w-8 h-8 bg-gradient-to-br from-cyan-500 to-violet-600 rounded-lg flex items-center justify-center">
                      <Brain className="h-5 w-5 text-white" />
                    </div>
                    <div className="flex-1">
                      <h1 className="text-lg font-bold text-gray-900 dark:text-gray-100">FinApp</h1>
                      <div className="flex items-center gap-1 mt-1">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-xs text-gray-500 dark:text-gray-400">Online Â· Secure</span>
                      </div>
                    </div>
                  </div>
                </Link>
              </motion.div>
            ) : (
              <motion.div
                key="collapsed"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <Link href="/finapp">
                  <div className="w-8 h-8 bg-gradient-to-br from-cyan-500 to-violet-600 rounded-lg flex items-center justify-center cursor-pointer hover:opacity-80 transition-opacity">
                    <Brain className="h-5 w-5 text-white" />
                  </div>
                </Link>
              </motion.div>
            )}
          </AnimatePresence>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleCollapsed}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            {isCollapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
          </Button>
        </div>
      </div>

      {/* Chat Navigation */}
      <div className="p-3 border-b border-gray-200 dark:border-gray-700">
        {/* New Chat Button */}
        <Button
          onClick={handleNewChat}
          className={`w-full bg-gradient-to-r from-cyan-500 to-violet-500 hover:from-cyan-600 hover:to-violet-600 text-white ${
            isCollapsed ? 'px-2' : 'gap-2'
          } mb-3`}
        >
          <Plus className="h-4 w-4" />
          {!isCollapsed && <span>Nowy Chat</span>}
        </Button>

        {/* Current Chat */}
        <Link href="/finapp">
          <Button
            variant="ghost"
            className={`w-full ${
              isCollapsed ? 'px-2' : 'justify-start gap-3'
            } ${location === '/finapp' ? 'bg-gray-100 dark:bg-gray-800' : ''}`}
          >
            <MessageCircle className="h-4 w-4 flex-shrink-0 text-blue-600" />
            {!isCollapsed && <span>Aktualny Chat</span>}
          </Button>
        </Link>
      </div>

      {/* Chat History */}
      <div className="flex-1 overflow-y-auto p-3">
        <AnimatePresence>
          {!isCollapsed && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="space-y-2"
            >
              <h3 className="text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider mb-3 px-2">
            Historia ChatÃ³w
          </h3>
              
              {isLoadingSessions ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
                  <span className="ml-2 text-sm text-gray-500">Åadowanie chatÃ³w...</span>
                </div>
              ) : chatSessions.length > 0 ? (
                <div className="space-y-1">
                  {chatSessions.map((chat) => (
                    <motion.div
                      key={chat.sessionId}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className="p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors group relative"
                      onClick={() => handleChatClick(chat)}
                    >
                      <div className="flex items-start gap-3">
                        <div className="relative">
                          <MessageCircle className="h-4 w-4 text-gray-400 mt-0.5 flex-shrink-0" />
                          {chat.messageCount > 0 && (
                            <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full flex items-center justify-center">
                              <span className="text-[10px] text-white font-medium">
                                {chat.messageCount > 9 ? '9+' : chat.messageCount}
                              </span>
                            </div>
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <p className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
                              {chat.title}
                            </p>
                            {chat.advisorName && (
                              <span className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-1.5 py-0.5 rounded">
                                {chat.advisorName}
                              </span>
                            )}
                          </div>
                          <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                            {chat.lastMessage || 'No messages yet'}
                          </p>
                          <div className="flex items-center justify-between mt-1">
                            <p className="text-xs text-gray-400 dark:text-gray-500">
                              {chat.timestamp}
                            </p>
                            {!chat.isActive && (
                              <span className="text-xs text-red-400">Inactive</span>
                            )}
                          </div>
                        </div>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                              onClick={(e) => e.stopPropagation()}
                            >
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem
                              onClick={(e) => handleDeleteChat(chat.sessionId, e)}
                              className="text-red-600 dark:text-red-400"
                            >
                              UsuÅ Chat
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </motion.div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <MessageCircle className="h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-3" />
                  <p className="text-sm text-gray-500 dark:text-gray-400">Brak chatÃ³w</p>
                  <p className="text-xs text-gray-400 dark:text-gray-500 mt-1">
                    Rozpocznij rozmowÄ, aby zobaczyÄ historiÄ
                  </p>
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Footer - User Profile & Logout */}
      <div className="p-3 border-t border-gray-200 dark:border-gray-700">
        <div className={`space-y-2 ${isCollapsed ? 'items-center' : ''}`}>
          {/* User Profile Dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                className={`w-full text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 ${
                  isCollapsed ? 'px-2' : 'justify-start gap-3'
                }`}
              >
                <User className="h-4 w-4 flex-shrink-0" />
                {!isCollapsed && <span>Profil uÅ¼ytkownika</span>}
                {!isCollapsed && <Settings className="h-4 w-4 ml-auto" />}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent side={isCollapsed ? "right" : "top"} className="w-56">
              <DropdownMenuItem asChild>
                <Link href="/profile" className="flex items-center gap-2 w-full">
                  <User className="h-4 w-4" />
                  Konto/Profil
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link href="/profile" className="flex items-center gap-2 w-full">
                  <Settings className="h-4 w-4" />
                  Ustawienia
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              
              {/* Theme Selection */}
              <div className="px-2 py-1">
                <div className="text-xs text-gray-500 dark:text-gray-400 mb-2">Motyw</div>
                <div className="grid grid-cols-3 gap-1">
                  <Button
                    variant={theme === 'light' ? "default" : "ghost"}
                    size="sm"
                    className={`h-8 px-2 ${theme === 'light' ? 'bg-cyan-500 hover:bg-cyan-600 text-white' : ''}`}
                    onClick={() => setTheme('light')}
                  >
                    <Sun className="h-3 w-3" />
                  </Button>
                  <Button
                    variant={theme === 'dark' ? "default" : "ghost"}
                    size="sm"
                    className={`h-8 px-2 ${theme === 'dark' ? 'bg-violet-500 hover:bg-violet-600 text-white' : ''}`}
                    onClick={() => setTheme('dark')}
                  >
                    <Moon className="h-3 w-3" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 px-2"
                    onClick={() => {
                      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                      setTheme(systemTheme);
                    }}
                  >
                    <Palette className="h-3 w-3" />
                  </Button>
                </div>
              </div>
            </DropdownMenuContent>
          </DropdownMenu>
          
          {/* Logout Button */}
          <Button
            variant="ghost"
            onClick={logout}
            className={`w-full text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 ${
              isCollapsed ? 'px-2' : 'justify-start gap-3'
            }`}
          >
            <LogOut className="h-4 w-4 flex-shrink-0" />
            {!isCollapsed && <span>Wyloguj</span>}
          </Button>
        </div>
      </div>
    </motion.div>
  );
}
